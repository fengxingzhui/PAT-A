1069 The Black Hole of Numbers （20 分）
For any 4-digit integer except the ones with all the digits being the same, if we sort the digits in non-increasing order first, and then in non-decreasing order, a new number can be obtained by taking the second number from the first one. Repeat in this manner we will soon end up at the number 6174 -- the black hole of 4-digit numbers. This number is named Kaprekar Constant.

For example, start from 6767, we'll get:

7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
7641 - 1467 = 6174
... ...
Given any 4-digit number, you are supposed to illustrate the way it gets into the black hole.

Input Specification:
Each input file contains one test case which gives a positive integer N in the range (0,10^​4​​ ).

Output Specification:
If all the 4 digits of N are the same, print in one line the equation N - N = 0000. Else print each step of calculation in a line until 6174 comes out as the difference. All the numbers must be printed as 4-digit numbers.

Sample Input 1:
6767
Sample Output 1:
7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
Sample Input 2:
2222
Sample Output 2:
2222 - 2222 = 0000

注意：原汁原味的坑题，不让用sscanf和sprintf

#include<iostream>
#include<algorithm>
using namespace std;
bool cmp(char a,char b)
{
	return a>b;
}
int main()
{
	int num;
	scanf("%d",&num);
	while(1)
	{
		char str[4] = {};
		int num1=0,num2=0;
		for(int i=3;i>=0;i--)
		{
			str[i] = num%10+'0';
			num/=10;
		}
		sort(str,str+4,cmp);
		for(int i=0;i<4;i++)
			num1=num1*10+(str[i]-'0');
		sort(str,str+4);
		for(int i=0;i<4;i++)
			num2=num2*10+(str[i]-'0');
		num=num1-num2;
		printf("%04d - %04d = %04d\n",num1,num2,num);
		if(num==6174||!num) break;
	}
}