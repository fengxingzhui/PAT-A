1020 Tree Traversals （25 分）
Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.

Input Specification:
Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.

Output Specification:
For each test case, print in one line the level order traversal sequence of the corresponding binary tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.

Sample Input:
7
2 3 1 5 7 6 4
1 2 3 4 5 6 7
Sample Output:
4 1 6 3 5 7 2

 注意：卧槽好难/(ㄒoㄒ)/~~
       等等，这类题可以偷鸡啊
 
 #include<cstdio>
#include<queue>
using namespace std;
struct tree
{
	int data;
	tree *left,*right;
};
int post[30]={},in[30]={};

tree* huanyuan(int post_left,int post_right,int in_left,int in_right)
{
	if(post_left>post_right) return NULL;
	tree *root = new(tree);
	root->data = post[post_right];
	int i;
	for(i=0;i<in_right;i++)
	{
		if(in[i]==root->data)
		{
			break;		
		}
	}
	int num_left = i - in_left;
	root->right = huanyuan(post_left+num_left,post_right-1,in_left+num_left+1,in_right);
	root->left = huanyuan(post_left,post_left+num_left-1,in_left,in_left+num_left-1);
	return root;
}

void level_order(tree *a)
{
	queue<tree*> q;
	q.push(a);
	while(!q.empty())
	{
		printf("%d",q.front()->data);
		if(q.front()->left) q.push(q.front()->left);
		if(q.front()->right) q.push(q.front()->right);
		q.pop();
		if(!q.empty()) printf(" ");
	}
}

int main()
{
	int N;
	scanf("%d",&N);
	for(int i=0;i<N;i++) scanf("%d",&post[i]);
	for(int i=0;i<N;i++) scanf("%d",&in[i]);
	tree *a = huanyuan(0,N-1,0,N-1);
	level_order(a);
}